# Generated by Django 3.1.14 on 2023-05-25 11:29

from django.conf import settings
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import shortuuid.django_fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('viewer', '0032_add_job_override_table'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompoundIdentifierType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.AlterField(
            model_name='activitypoint',
            name='activity',
            field=models.FloatField(db_index=True, help_text='Measured log(10) activity'),
        ),
        migrations.AlterField(
            model_name='activitypoint',
            name='internal_id',
            field=models.CharField(help_text='The ID of the compound for internal use', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='activitypoint',
            name='operator',
            field=models.CharField(default='NA', help_text='An operator, like > < or =', max_length=5),
        ),
        migrations.AlterField(
            model_name='activitypoint',
            name='units',
            field=models.CharField(help_text='Units (e.g. uM or whatever)', max_length=50),
        ),
        migrations.AlterField(
            model_name='compound',
            name='all_identifiers',
            field=models.TextField(blank=True, help_text='A comma separated list of all identifiers that have been used in the past to represent this 2D compound', null=True),
        ),
        migrations.AlterField(
            model_name='compound',
            name='current_identifier',
            field=models.CharField(blank=True, db_index=True, help_text='The identifier for this compound that is used in Fragalysis to represent its 3D molecule (optional)', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='compound',
            name='heavy_atom_count',
            field=models.IntegerField(help_text='Computed heavy (non-hydrogen) atom count'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='heavy_atom_mol_wt',
            field=models.FloatField(help_text='Computed molecular weight of all heavy (non-hydrogen) atoms'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='inspirations',
            field=models.ManyToManyField(blank=True, help_text='Foreign key link to any number of 3D Molecules that inspired the design of this compound', null=True, to='viewer.Molecule'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='long_inchi',
            field=models.TextField(blank=True, help_text='For historical reasons, the inchi field cannot be removed, but has a max limit of 255 characters. If the inchi key for a compound is longer than this, it is stored in the long_inchi field, and the inchi key is concatenated to the first 255 characters. (optional)', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='compound',
            name='mol_log_p',
            field=models.FloatField(help_text='Computed LogP value'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='mol_wt',
            field=models.FloatField(help_text='Computed molecular weight (Da)'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='nhoh_count',
            field=models.IntegerField(help_text='Computed number of hydroxylamine groups'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='no_count',
            field=models.IntegerField(help_text='Computed number of nitroso groups'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='num_h_acceptors',
            field=models.IntegerField(help_text='Computed number of hydrogen-bond acceptor groups'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='num_h_donors',
            field=models.IntegerField(help_text='Computed number of hydrogen-bond donor groups'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='num_het_atoms',
            field=models.IntegerField(help_text='Computed number of heterogeneous atoms'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='num_rot_bonds',
            field=models.IntegerField(help_text='Computed number of rotatable bonds'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='num_val_electrons',
            field=models.IntegerField(help_text='Computed number of valence electrons'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='ring_count',
            field=models.IntegerField(help_text='Computed number of rings in the molecule'),
        ),
        migrations.AlterField(
            model_name='compound',
            name='tpsa',
            field=models.FloatField(help_text='Computed Topological Polar Surface Area'),
        ),
        migrations.AlterField(
            model_name='computedmolecule',
            name='computed_inspirations',
            field=models.ManyToManyField(blank=True, help_text='Existing fragalysis molecules that were inspirations in the design/calculation of the molecule', null=True, to='viewer.Molecule'),
        ),
        migrations.AlterField(
            model_name='computedmolecule',
            name='sdf_info',
            field=models.TextField(help_text='The 3D coordinates for the molecule'),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='method_url',
            field=models.TextField(help_text='A url linking to a write-up of the methodology used to create the computed set', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='spec_version',
            field=models.FloatField(help_text='The version of the sdf file format specification'),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='submitted_sdf',
            field=models.FileField(help_text='The sdf file containing the computed set', max_length=255, upload_to='compound_sets/'),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='unique_name',
            field=models.CharField(help_text='A unique name for the computed set, generated but the custom save() method', max_length=101),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='upload_datetime',
            field=models.DateTimeField(help_text='The datetime the upload was completed', null=True),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='upload_progress',
            field=models.DecimalField(decimal_places=2, help_text='Intended to be used as an indication of progress (0 to 100%)', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='upload_status',
            field=models.CharField(choices=[('PENDING', 'PENDING'), ('STARTED', 'STARTED'), ('SUCCESS', 'SUCCESS'), ('FAILURE', 'FAILURE'), ('RETRY', 'RETRY'), ('REVOKED', 'REVOKED')], help_text='Status of the upload. Only be updated at the end of the process', max_length=7, null=True),
        ),
        migrations.AlterField(
            model_name='computedset',
            name='upload_task_id',
            field=models.CharField(help_text='The task ID of the upload Celery task', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='computedsetsubmitter',
            name='institution',
            field=models.CharField(help_text='The institution or organizational affiliation of the compound set submitter', max_length=50),
        ),
        migrations.AlterField(
            model_name='computedsetsubmitter',
            name='method',
            field=models.CharField(help_text='A name for the method that was used to produce the uploaded data', max_length=50),
        ),
        migrations.AlterField(
            model_name='csetkeys',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique key for the user', primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='designset',
            name='compounds',
            field=models.ManyToManyField(help_text='The compounds that are in the design set', to='viewer.Compound'),
        ),
        migrations.AlterField(
            model_name='discoursecategory',
            name='category_name',
            field=models.CharField(help_text='The name of the (sub)category within Discourse. It must be unique', max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='discoursecategory',
            name='discourse_category_id',
            field=models.IntegerField(help_text='The Discourse categoryID. Returned when the category was created'),
        ),
        migrations.AlterField(
            model_name='discoursetopic',
            name='topic_title',
            field=models.CharField(help_text='The title of the (sub)category within Discourse. It must be unique within Discourse', max_length=200, unique=True, validators=[django.core.validators.MinLengthValidator(15, 'Discourse Topic Title must be longer than 15 characters')]),
        ),
        migrations.AlterField(
            model_name='downloadlinks',
            name='file_url',
            field=models.CharField(db_index=True, help_text='Contains the complete link to the zip file including the uuid', max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='downloadlinks',
            name='keep_zip_until',
            field=models.DateTimeField(db_index=True, help_text='The datetime when the tag was created plus the retention time (1 hour at the time of writing)'),
        ),
        migrations.AlterField(
            model_name='downloadlinks',
            name='other_params',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Contains a sorted list of parameters used to create the zip file', null=True),
        ),
        migrations.AlterField(
            model_name='downloadlinks',
            name='protein_params',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Contains a sorted list of parameters used to create the zip file', null=True),
        ),
        migrations.AlterField(
            model_name='downloadlinks',
            name='proteins',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Contains a sorted list of the protein codes in the search', null=True),
        ),
        migrations.AlterField(
            model_name='downloadlinks',
            name='static_link',
            field=models.BooleanField(default=False, help_text='This preserves the proteins from the previous search'),
        ),
        migrations.AlterField(
            model_name='downloadlinks',
            name='zip_contents',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='For static files, this field contains the contents of the zip so that it can be reconstructed with the same file-links that it had previously. For dynamic files, the zip is reconstructed from the search', null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='chain_id',
            field=models.CharField(help_text='Chain ID from the pdb file it originated from (e.g. A)', max_length=1, null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='cmpd_id',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Associated 2D compound', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='viewer.compound'),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='lig_id',
            field=models.CharField(help_text='Ligand ID from the pdb file it originated from (e.g. LIG 1 A)', max_length=5, null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='occupancy',
            field=models.FloatField(help_text='The occupancy (electron density) of the molecule', null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='prot_id',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Associated protein (apo) that this ligand was pulled from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='viewer.protein'),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='rscc',
            field=models.FloatField(help_text='The RSCC score of the molecule 3D coordinates vs. PANDDA event map', null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='sdf_file',
            field=models.TextField(help_text='File link to uploaded sdf file', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='sdf_info',
            field=models.TextField(help_text='The 3D coordinates for the molecule in MDL (mol file) format. Taken directly from the uploaded file', null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='x_com',
            field=models.FloatField(help_text='x-coordinate for centre of mass', null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='y_com',
            field=models.FloatField(help_text='y-coordinate for centre of mass', null=True),
        ),
        migrations.AlterField(
            model_name='historicalmolecule',
            name='z_com',
            field=models.FloatField(help_text='z-coordinate for centre of mass', null=True),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='compounds',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='List of compounds to be transferred (not used yet)', null=True),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='proteins',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='List of proteins to be transferred', null=True),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='squonk_project',
            field=models.CharField(help_text='The name of the Squonk project that the files will be transferred to', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='sub_path',
            field=shortuuid.django_fields.ShortUUIDField(alphabet='abcdefghijklmnopqrstuvwxyz', help_text="A 'random' sub-path where files will be transferred to", length=4, max_length=4, null=True, prefix=''),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='transfer_datetime',
            field=models.DateTimeField(help_text='The datetime the transfer was completed', null=True),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='transfer_progress',
            field=models.DecimalField(decimal_places=2, help_text='Intended to be used as an indication of progress (0 to 100%)', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='transfer_spec',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Identifies for each type (protein or compound), which file types were transferred over', null=True),
        ),
        migrations.AlterField(
            model_name='jobfiletransfer',
            name='transfer_task_id',
            field=models.CharField(help_text='The ID of transfer Celery task', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='code',
            field=models.UUIDField(default=uuid.uuid4, editable=False, help_text='A UUID generated by Fragalysis and passed to Squonk as part of a callback URL. This value is used to uniquely identify the HJob in Squonk and is passed back by squonk to provide context in calls to the JobCallBackView', unique=True),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='job_finish_datetime',
            field=models.DateTimeField(help_text='The datetime when the Squonk Job has finished, populated by information in the Squonk callback. If this is not set you can assume the JOb is still running. When it is set the job_status filed will be updated (to SUCCESS or FAILURE). If automatic upload follows an upload_task_id wil be set and you can monitor upload_status for a status of the upload', null=True),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='job_status',
            field=models.CharField(choices=[('PENDING', 'PENDING'), ('STARTED', 'STARTED'), ('SUCCESS', 'SUCCESS'), ('FAILURE', 'FAILURE'), ('RETRY', 'RETRY'), ('REVOKED', 'REVOKED')], default='PENDING', help_text="The status of the Squonk job, e.g. 'PENDING' Will be modified by Squonk through the callback URL", max_length=7),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='snapshot',
            field=models.ForeignKey(help_text='The snapshot the file transfer is part of', on_delete=django.db.models.deletion.CASCADE, to='viewer.snapshot'),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='squonk_job_info',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text="squonk_job_info is a copy of the response from DmApi.start_job_instance(). It's an instance of a DmApiRv object (a namedtuple) that contains a 'success' (boolean) and 'msg' (the DmApi response's resp.json()). For us this will contain a 'task_id', 'instance_id' and 'callback_token'. The content will be a list with index '0' that's the value of the DmApiRv 'success' variable and, at index '1', the original response message json(). The Job callback token will be squonk_job_info[1]['callback_token']", null=True),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='squonk_project',
            field=models.CharField(help_text='The name of a project that has been created in Squonk that the files will be transferred to', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='squonk_url_ext',
            field=models.CharField(help_text="a Squonk UI URL to obtain information about the running instance. It's essentially the Squonk URL with the instance ID appended.", max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='upload_status',
            field=models.CharField(choices=[('PENDING', 'PENDING'), ('STARTED', 'STARTED'), ('SUCCESS', 'SUCCESS'), ('FAILURE', 'FAILURE'), ('RETRY', 'RETRY'), ('REVOKED', 'REVOKED')], default='PENDING', help_text='Status of upload task', max_length=7, null=True),
        ),
        migrations.AlterField(
            model_name='jobrequest',
            name='upload_task_id',
            field=models.CharField(help_text='Celery task ID for results upload task. Set when the Job completes and an automated upload follows', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='chain_id',
            field=models.CharField(help_text='Chain ID from the pdb file it originated from (e.g. A)', max_length=1, null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='cmpd_id',
            field=models.ForeignKey(help_text='Associated 2D compound', on_delete=django.db.models.deletion.CASCADE, to='viewer.compound'),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='lig_id',
            field=models.CharField(help_text='Ligand ID from the pdb file it originated from (e.g. LIG 1 A)', max_length=5, null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='occupancy',
            field=models.FloatField(help_text='The occupancy (electron density) of the molecule', null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='prot_id',
            field=models.ForeignKey(help_text='Associated protein (apo) that this ligand was pulled from', on_delete=django.db.models.deletion.CASCADE, to='viewer.protein'),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='rscc',
            field=models.FloatField(help_text='The RSCC score of the molecule 3D coordinates vs. PANDDA event map', null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='sdf_file',
            field=models.FileField(help_text='File link to uploaded sdf file', max_length=255, null=True, upload_to='sdfs/'),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='sdf_info',
            field=models.TextField(help_text='The 3D coordinates for the molecule in MDL (mol file) format. Taken directly from the uploaded file', null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='x_com',
            field=models.FloatField(help_text='x-coordinate for centre of mass', null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='y_com',
            field=models.FloatField(help_text='y-coordinate for centre of mass', null=True),
        ),
        migrations.AlterField(
            model_name='molecule',
            name='z_com',
            field=models.FloatField(help_text='z-coordinate for centre of mass', null=True),
        ),
        migrations.AlterField(
            model_name='moleculetag',
            name='additional_info',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Optional JSON field containing name/value pairs for future use', null=True),
        ),
        migrations.AlterField(
            model_name='moleculetag',
            name='colour',
            field=models.CharField(help_text='Expected to be an RGB string', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='moleculetag',
            name='tag',
            field=models.CharField(help_text='The (unique) name of the tag', max_length=200),
        ),
        migrations.AlterField(
            model_name='protein',
            name='aligned_to',
            field=models.ForeignKey(help_text='Foreign key to another instance of a protein to which this protein is aligned (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='viewer.protein'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='apo_desolve_info',
            field=models.FileField(help_text='File link to uploaded _apo-desolv.pdb file (optional)', max_length=255, null=True, upload_to='pdbs/'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='apo_holo',
            field=models.NullBooleanField(help_text='0 for apo (ligand removed), 1 for holo (ligand in tact)'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='bound_info',
            field=models.FileField(help_text='File link to uploaded bound pdb file (optional)', max_length=255, null=True, upload_to='bound/'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='cif_info',
            field=models.FileField(help_text='File link to uploaded cif file (optional)', max_length=255, null=True, upload_to='cifs/'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='code',
            field=models.CharField(db_index=True, help_text='Code for this protein (e.g. NUDT5A-x0001_1A)', max_length=50),
        ),
        migrations.AlterField(
            model_name='protein',
            name='map_info',
            field=models.FileField(help_text='File link to uploaded map file (optional)', max_length=255, null=True, upload_to='maps/'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='mtz_info',
            field=models.FileField(help_text='File link to uploaded mtz file (optional)', max_length=255, null=True, upload_to='mtzs/'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='pdb_header_info',
            field=models.FileField(help_text='File link to uploaded _header.pdb file (optional)', max_length=255, null=True, upload_to='pdbs/'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='pdb_info',
            field=models.FileField(help_text='File link to apo pdb structure - pdb file with ligand removed', max_length=255, null=True, upload_to='pdbs/'),
        ),
        migrations.AlterField(
            model_name='protein',
            name='trans_matrix_info',
            field=models.FileField(help_text='File link to uploaded transformation matrix file (optional)', max_length=255, null=True, upload_to='trans/'),
        ),
        migrations.AlterField(
            model_name='scoredescription',
            name='description',
            field=models.TextField(help_text='A description of this score, which should describe how to interpret it'),
        ),
        migrations.AlterField(
            model_name='scoredescription',
            name='name',
            field=models.CharField(help_text='A name for this score', max_length=50),
        ),
        migrations.AlterField(
            model_name='sessionproject',
            name='description',
            field=models.CharField(default='', help_text='A short user-defined description for the project', max_length=255),
        ),
        migrations.AlterField(
            model_name='sessionproject',
            name='project',
            field=models.ForeignKey(help_text='Foreign Key link to the relevant project (optional for legacy reasons)', null=True, on_delete=django.db.models.deletion.CASCADE, to='viewer.project'),
        ),
        migrations.AlterField(
            model_name='sessionproject',
            name='tags',
            field=models.TextField(default='[]', help_text='A comma-separated list of user-defined tags used for searching and tagging projects'),
        ),
        migrations.AlterField(
            model_name='sessionprojecttag',
            name='additional_info',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Optional JSON field containing name/value pairs for future use', null=True),
        ),
        migrations.AlterField(
            model_name='sessionprojecttag',
            name='colour',
            field=models.CharField(help_text='Expected to be an RGB string', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='sessionprojecttag',
            name='tag',
            field=models.CharField(help_text='The (unique) name of the tag', max_length=200),
        ),
        migrations.AlterField(
            model_name='snapshot',
            name='additional_info',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Optional JSON field containing name/value pairs for future use', null=True),
        ),
        migrations.AlterField(
            model_name='snapshot',
            name='data',
            field=models.TextField(help_text='JSON data that is passed from the front-end describing what to load into the react components to reproduce the session state'),
        ),
        migrations.AlterField(
            model_name='snapshot',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Another Snapshot instance describing the current Snapshot parent', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='children', to='viewer.snapshot'),
        ),
        migrations.AlterField(
            model_name='squonk2org',
            name='name',
            field=models.TextField(help_text='The name of the Squonk2 Organisation UUID (obtained form the AS)', max_length=80),
        ),
        migrations.AlterField(
            model_name='squonk2org',
            name='uuid',
            field=models.TextField(help_text="A Squonk2 Account Server (AS) Organisation UUID. A fixed length string consisting of 'org-' followed by a uuid4 value, e.g. 'org-54260047-183b-42e8-9658-385a1e1bd236'", max_length=40),
        ),
        migrations.AlterField(
            model_name='squonk2project',
            name='name',
            field=models.TextField(help_text='The name of the Squonk2 Project UUID (obtained form the AS)'),
        ),
        migrations.AlterField(
            model_name='squonk2project',
            name='product_uuid',
            field=models.TextField(help_text="A Squonk2 Account Server (AS) Product UUID. A fixed length string consisting of 'product-' followed by a uuid4 value, e.g. 'product-54260047-183b-42e8-9658-385a1e1bd236'", max_length=44),
        ),
        migrations.AlterField(
            model_name='squonk2unit',
            name='name',
            field=models.TextField(help_text='The name used to create the Squonk2 Unit UUID This is not limited by the actual name length imposed by the DM'),
        ),
        migrations.AlterField(
            model_name='squonk2unit',
            name='uuid',
            field=models.TextField(help_text="A Squonk2 Account Server (AS) Unit UUID. A fixed length string consisting of 'unit-' followed by a uuid4 value, e.g. 'unit-54260047-183b-42e8-9658-385a1e1bd236'", max_length=41),
        ),
        migrations.AlterField(
            model_name='tagcategory',
            name='category',
            field=models.CharField(help_text='The name of the tag category', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='tagcategory',
            name='colour',
            field=models.CharField(help_text='Expected to be an RGB string', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='target',
            name='metadata',
            field=models.FileField(help_text='Optional file upload defining metadata about the target. Can be used to add custom site labels', max_length=255, null=True, upload_to='metadata/'),
        ),
        migrations.AlterField(
            model_name='target',
            name='title',
            field=models.CharField(help_text='A title, i.e. Mpro', max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='target',
            name='uniprot_id',
            field=models.CharField(help_text='The uniprot ID id for the target. A unique key', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='target',
            name='upload_datetime',
            field=models.DateTimeField(help_text='The datetime the upload was completed', null=True),
        ),
        migrations.AlterField(
            model_name='target',
            name='upload_progress',
            field=models.DecimalField(decimal_places=2, help_text='Intended to be used as an indication of progress (0 to 100%)', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='target',
            name='upload_status',
            field=models.CharField(choices=[('PENDING', 'PENDING'), ('STARTED', 'STARTED'), ('SUCCESS', 'SUCCESS'), ('FAILURE', 'FAILURE'), ('RETRY', 'RETRY'), ('REVOKED', 'REVOKED')], help_text='Identifies the status of the upload. Will only be updated at the end of the process', max_length=7, null=True),
        ),
        migrations.AlterField(
            model_name='target',
            name='upload_task_id',
            field=models.CharField(help_text='The Task ID of upload Celery task)', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='target',
            name='zip_archive',
            field=models.FileField(help_text='Link to zip file created from targets uploaded with the loader', max_length=255, null=True, upload_to='archive/'),
        ),
        migrations.CreateModel(
            name='Xtalform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.experiment')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=255, upload_to='experiment-upload/')),
                ('commit_datetime', models.DateTimeField(help_text='The UTC datetime the upload was committed')),
                ('complete_datetime', models.DateTimeField(help_text='The UTC datetime the upload finished. It can be considered a success if the status is LOADED', null=True)),
                ('task_id', models.CharField(help_text='Celery task ID responsible for the upload', max_length=50, null=True)),
                ('status', models.CharField(choices=[('LOADING', 'LOADING'), ('LOADED', 'LOADED'), ('FAILURE', 'FAILURE')], default='LOADING', max_length=7)),
                ('message', models.TextField(blank=True, help_text='Any message associated with the upload. Typically set when status is FAILURE', null=True)),
                ('committer', models.ForeignKey(help_text='The user committing the original file. This user may not be the author of the file', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.project')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.target')),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_upload',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.experimentupload'),
        ),
        migrations.CreateModel(
            name='CompoundIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(null=True)),
                ('name', models.CharField(max_length=40)),
                ('compound', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.compound')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.compoundidentifiertype')),
            ],
        ),
        migrations.AddField(
            model_name='protein',
            name='experiment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='viewer.experiment'),
        ),
    ]
