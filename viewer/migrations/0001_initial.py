# Generated by Django 3.2.20 on 2023-08-18 15:06

from django.conf import settings
import django.contrib.postgres.fields
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(default='', max_length=200)),
                ('active', models.BooleanField(default=False)),
                (
                    'activation_date',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                'db_table': 'viewer_actiontype',
            },
        ),
        migrations.CreateModel(
            name='CanonSite',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.TextField()),
                (
                    'residues',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    'canon_site_id',
                    models.IntegerField(help_text='canon_site id from YAML'),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CanonSiteConf',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.TextField(null=True)),
                (
                    'residues',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    'canon_site',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.canonsite',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('inchi', models.TextField(db_index=True)),
                ('smiles', models.CharField(db_index=True, max_length=255)),
                (
                    'current_identifier',
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text='The identifier for this compound that is used in Fragalysis to represent its 3D molecule (optional)',
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    'all_identifiers',
                    models.TextField(
                        blank=True,
                        help_text='A comma separated list of all identifiers that have been used in the past to represent this 2D compound',
                        null=True,
                    ),
                ),
                ('mol_log_p', models.FloatField(help_text='Computed LogP value')),
                (
                    'mol_wt',
                    models.FloatField(help_text='Computed molecular weight (Da)'),
                ),
                (
                    'tpsa',
                    models.FloatField(
                        help_text='Computed Topological Polar Surface Area'
                    ),
                ),
                (
                    'heavy_atom_count',
                    models.IntegerField(
                        help_text='Computed heavy (non-hydrogen) atom count'
                    ),
                ),
                (
                    'heavy_atom_mol_wt',
                    models.FloatField(
                        help_text='Computed molecular weight of all heavy (non-hydrogen) atoms'
                    ),
                ),
                (
                    'nhoh_count',
                    models.IntegerField(
                        help_text='Computed number of hydroxylamine groups'
                    ),
                ),
                (
                    'no_count',
                    models.IntegerField(help_text='Computed number of nitroso groups'),
                ),
                (
                    'num_h_acceptors',
                    models.IntegerField(
                        help_text='Computed number of hydrogen-bond acceptor groups'
                    ),
                ),
                (
                    'num_h_donors',
                    models.IntegerField(
                        help_text='Computed number of hydrogen-bond donor groups'
                    ),
                ),
                (
                    'num_het_atoms',
                    models.IntegerField(
                        help_text='Computed number of heterogeneous atoms'
                    ),
                ),
                (
                    'num_rot_bonds',
                    models.IntegerField(help_text='Computed number of rotatable bonds'),
                ),
                (
                    'num_val_electrons',
                    models.IntegerField(
                        help_text='Computed number of valence electrons'
                    ),
                ),
                (
                    'ring_count',
                    models.IntegerField(
                        help_text='Computed number of rings in the molecule'
                    ),
                ),
                ('description', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompoundIdentifierType',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ComputedMolecule',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sdf_info',
                    models.TextField(help_text='The 3D coordinates for the molecule'),
                ),
                ('name', models.CharField(max_length=50)),
                ('smiles', models.CharField(max_length=255)),
                (
                    'compound',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.compound',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='ComputedSet',
            fields=[
                (
                    'name',
                    models.CharField(
                        max_length=50, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    'submitted_sdf',
                    models.FileField(
                        help_text='The sdf file containing the computed set',
                        max_length=255,
                        upload_to='compound_sets/',
                    ),
                ),
                (
                    'spec_version',
                    models.FloatField(
                        help_text='The version of the sdf file format specification'
                    ),
                ),
                (
                    'method_url',
                    models.TextField(
                        help_text='A url linking to a write-up of the methodology used to create the computed set',
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    'unique_name',
                    models.CharField(
                        help_text='A unique name for the computed set, generated but the custom save() method',
                        max_length=101,
                    ),
                ),
                (
                    'upload_task_id',
                    models.CharField(
                        help_text='The task ID of the upload Celery task',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'upload_status',
                    models.CharField(
                        choices=[
                            ('PENDING', 'PENDING'),
                            ('STARTED', 'STARTED'),
                            ('SUCCESS', 'SUCCESS'),
                            ('FAILURE', 'FAILURE'),
                            ('RETRY', 'RETRY'),
                            ('REVOKED', 'REVOKED'),
                        ],
                        help_text='Status of the upload. Only be updated at the end of the process',
                        max_length=7,
                        null=True,
                    ),
                ),
                (
                    'upload_progress',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Intended to be used as an indication of progress (0 to 100%)',
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    'upload_datetime',
                    models.DateTimeField(
                        help_text='The datetime the upload was completed', null=True
                    ),
                ),
                (
                    'owner_user',
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CSetKeys',
            fields=[
                (
                    'user',
                    models.CharField(default='User', editable=False, max_length=50),
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text='Unique key for the user',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('code', models.TextField(null=True)),
                ('status', models.IntegerField(null=True)),
                ('version', models.IntegerField(null=True)),
                (
                    'pdb_info',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'mtz_info',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'cif_info',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'event_map_info',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FileField(upload_to=''), null=True, size=None
                    ),
                ),
                ('type', models.PositiveSmallIntegerField(null=True)),
                ('pdb_sha256', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('file', models.FileField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('title', models.CharField(max_length=200, unique=True)),
                ('init_date', models.DateTimeField(auto_now_add=True)),
                ('open_to_public', models.BooleanField(default=False)),
                ('user_id', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuatAssembly',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('chains', models.TextField()),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ScoreDescription',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'name',
                    models.CharField(help_text='A name for this score', max_length=50),
                ),
                (
                    'description',
                    models.TextField(
                        help_text='A description of this score, which should describe how to interpret it'
                    ),
                ),
                (
                    'computed_set',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.computedset',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='SessionProject',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('title', models.CharField(max_length=200)),
                ('init_date', models.DateTimeField(default=django.utils.timezone.now)),
                (
                    'description',
                    models.CharField(
                        default='',
                        help_text='A short user-defined description for the project',
                        max_length=255,
                    ),
                ),
                (
                    'tags',
                    models.TextField(
                        default='[]',
                        help_text='A comma-separated list of user-defined tags used for searching and tagging projects',
                    ),
                ),
                (
                    'author',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'project',
                    models.ForeignKey(
                        help_text='Foreign Key link to the relevant project (optional for legacy reasons)',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.project',
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_sessionproject',
            },
        ),
        migrations.CreateModel(
            name='Snapshot',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                (
                    'type',
                    models.CharField(
                        choices=[
                            ('INIT', 'INIT'),
                            ('AUTO', 'AUTO'),
                            ('MANUAL', 'MANUAL'),
                        ],
                        default='INIT',
                        max_length=8,
                    ),
                ),
                ('title', models.CharField(max_length=255)),
                ('description', models.CharField(default='', max_length=255)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                (
                    'data',
                    models.TextField(
                        help_text='JSON data that is passed from the front-end describing what to load into the react components to reproduce the session state'
                    ),
                ),
                (
                    'additional_info',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='Optional JSON field containing name/value pairs for future use',
                        null=True,
                    ),
                ),
                (
                    'author',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'parent',
                    models.ForeignKey(
                        blank=True,
                        help_text='Another Snapshot instance describing the current Snapshot parent',
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='children',
                        to='viewer.snapshot',
                    ),
                ),
                (
                    'session_project',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.sessionproject',
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_snapshot',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Squonk2Org',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.TextField(
                        help_text="A Squonk2 Account Server (AS) Organisation UUID. A fixed length string consisting of 'org-' followed by a uuid4 value, e.g. 'org-54260047-183b-42e8-9658-385a1e1bd236'",
                        max_length=40,
                    ),
                ),
                (
                    'name',
                    models.TextField(
                        help_text='The name of the Squonk2 Organisation UUID (obtained form the AS)',
                        max_length=80,
                    ),
                ),
                ('as_url', models.URLField()),
                ('as_version', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TagCategory',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'category',
                    models.CharField(
                        help_text='The name of the tag category',
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    'colour',
                    models.CharField(
                        help_text='Expected to be an RGB string',
                        max_length=20,
                        null=True,
                    ),
                ),
                ('description', models.CharField(max_length=200, null=True)),
            ],
            options={
                'db_table': 'viewer_tagcategory',
            },
        ),
        migrations.CreateModel(
            name='Xtalform',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.TextField(null=True)),
                ('space_group', models.TextField(null=True)),
                (
                    'unit_cell_info',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    'xtalform_id',
                    models.IntegerField(help_text='xtalform id from YAML', null=True),
                ),
                (
                    'experiment',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.experiment',
                    ),
                ),
                (
                    'quat_assembly',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.quatassembly',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='XtalformSite',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('lig_chain', models.CharField(max_length=1)),
                (
                    'residues',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    'xtalform_site_id',
                    models.IntegerField(help_text='xtalform site id from YAML'),
                ),
                (
                    'canon_site',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.canonsite',
                    ),
                ),
                (
                    'xtalform',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.xtalform',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='TextScoreValues',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('value', models.TextField(max_length=500)),
                (
                    'compound',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.computedmolecule',
                    ),
                ),
                (
                    'score',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.scoredescription',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'title',
                    models.CharField(
                        help_text='A title, i.e. Mpro', max_length=200, unique=True
                    ),
                ),
                ('init_date', models.DateTimeField(auto_now_add=True)),
                (
                    'uniprot_id',
                    models.CharField(
                        help_text='The uniprot ID id for the target. A unique key',
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    'metadata',
                    models.FileField(
                        help_text='Optional file upload defining metadata about the target. Can be used to add custom site labels',
                        max_length=255,
                        null=True,
                        upload_to='metadata/',
                    ),
                ),
                (
                    'zip_archive',
                    models.FileField(
                        help_text='Link to zip file created from targets uploaded with the loader',
                        max_length=255,
                        null=True,
                        upload_to='archive/',
                    ),
                ),
                ('default_squonk_project', models.CharField(max_length=200, null=True)),
                (
                    'upload_task_id',
                    models.CharField(
                        help_text='The Task ID of upload Celery task)',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'upload_status',
                    models.CharField(
                        choices=[
                            ('PENDING', 'PENDING'),
                            ('STARTED', 'STARTED'),
                            ('SUCCESS', 'SUCCESS'),
                            ('FAILURE', 'FAILURE'),
                            ('RETRY', 'RETRY'),
                            ('REVOKED', 'REVOKED'),
                        ],
                        help_text='Identifies the status of the upload. Will only be updated at the end of the process',
                        max_length=7,
                        null=True,
                    ),
                ),
                (
                    'upload_progress',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Intended to be used as an indication of progress (0 to 100%)',
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    'upload_datetime',
                    models.DateTimeField(
                        help_text='The datetime the upload was completed', null=True
                    ),
                ),
                ('project_id', models.ManyToManyField(to='viewer.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Squonk2Unit',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uuid',
                    models.TextField(
                        help_text="A Squonk2 Account Server (AS) Unit UUID. A fixed length string consisting of 'unit-' followed by a uuid4 value, e.g. 'unit-54260047-183b-42e8-9658-385a1e1bd236'",
                        max_length=41,
                    ),
                ),
                (
                    'name',
                    models.TextField(
                        help_text='The name used to create the Squonk2 Unit UUID This is not limited by the actual name length imposed by the DM'
                    ),
                ),
                (
                    'organisation',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.squonk2org',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Squonk2Project',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('uuid', models.TextField(max_length=44)),
                (
                    'name',
                    models.TextField(
                        help_text='The name of the Squonk2 Project UUID (obtained form the AS)'
                    ),
                ),
                (
                    'product_uuid',
                    models.TextField(
                        help_text="A Squonk2 Account Server (AS) Product UUID. A fixed length string consisting of 'product-' followed by a uuid4 value, e.g. 'product-54260047-183b-42e8-9658-385a1e1bd236'",
                        max_length=44,
                    ),
                ),
                (
                    'unit',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.squonk2unit',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='SnapshotActions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                (
                    'last_update_date',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    'actions',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    'author',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'session_project',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.sessionproject',
                    ),
                ),
                (
                    'snapshot',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.snapshot',
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_snapshotactions',
            },
        ),
        migrations.CreateModel(
            name='SiteObservation',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('code', models.TextField()),
                (
                    'bound_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'apo_solv_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'apo_desolv_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'apo_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'xmap_2fofc_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'event_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'artefacts_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                (
                    'pdb_header_file',
                    models.FileField(
                        max_length=255, null=True, upload_to='target_loader_data/'
                    ),
                ),
                ('smiles', models.TextField()),
                ('seq_id', models.IntegerField()),
                ('chain_id', models.CharField(max_length=1)),
                ('ligand_mol_file', models.TextField(null=True)),
                (
                    'canon_site_conf',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.canonsiteconf',
                    ),
                ),
                (
                    'cmpd',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.compound',
                    ),
                ),
                (
                    'experiment',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.experiment',
                    ),
                ),
                (
                    'xtalform_site',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.xtalformsite',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='sessionproject',
            name='target',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='viewer.target'
            ),
        ),
        migrations.CreateModel(
            name='SessionActions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                (
                    'last_update_date',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    'actions',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    'author',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'session_project',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.sessionproject',
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_sessionactions',
            },
        ),
        migrations.CreateModel(
            name='NumericalScoreValues',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('value', models.FloatField()),
                (
                    'compound',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.computedmolecule',
                    ),
                ),
                (
                    'score',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.scoredescription',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='JobRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('squonk_job_name', models.CharField(max_length=200, null=True)),
                (
                    'squonk_project',
                    models.CharField(
                        help_text='The name of a project that has been created in Squonk that the files will be transferred to',
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    'squonk_job_spec',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ('job_start_datetime', models.DateTimeField(null=True)),
                (
                    'job_finish_datetime',
                    models.DateTimeField(
                        help_text='The datetime when the Squonk Job has finished, populated by information in the Squonk callback. If this is not set you can assume the JOb is still running. When it is set the job_status filed will be updated (to SUCCESS or FAILURE). If automatic upload follows an upload_task_id wil be set and you can monitor upload_status for a status of the upload',
                        null=True,
                    ),
                ),
                (
                    'job_status',
                    models.CharField(
                        choices=[
                            ('PENDING', 'PENDING'),
                            ('STARTED', 'STARTED'),
                            ('SUCCESS', 'SUCCESS'),
                            ('FAILURE', 'FAILURE'),
                            ('RETRY', 'RETRY'),
                            ('REVOKED', 'REVOKED'),
                        ],
                        default='PENDING',
                        help_text="The status of the Squonk job, e.g. 'PENDING' Will be modified by Squonk through the callback URL",
                        max_length=7,
                    ),
                ),
                ('job_status_datetime', models.DateTimeField(null=True)),
                (
                    'squonk_job_info',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text="squonk_job_info is a copy of the response from DmApi.start_job_instance(). It's an instance of a DmApiRv object (a namedtuple) that contains a 'success' (boolean) and 'msg' (the DmApi response's resp.json()). For us this will contain a 'task_id', 'instance_id' and 'callback_token'. The content will be a list with index '0' that's the value of the DmApiRv 'success' variable and, at index '1', the original response message json(). The Job callback token will be squonk_job_info[1]['callback_token']",
                        null=True,
                    ),
                ),
                (
                    'squonk_url_ext',
                    models.CharField(
                        help_text="a Squonk UI URL to obtain information about the running instance. It's essentially the Squonk URL with the instance ID appended.",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    'code',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text='A UUID generated by Fragalysis and passed to Squonk as part of a callback URL. This value is used to uniquely identify the HJob in Squonk and is passed back by squonk to provide context in calls to the JobCallBackView',
                        unique=True,
                    ),
                ),
                (
                    'upload_task_id',
                    models.CharField(
                        help_text='Celery task ID for results upload task. Set when the Job completes and an automated upload follows',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'upload_status',
                    models.CharField(
                        choices=[
                            ('PENDING', 'PENDING'),
                            ('STARTED', 'STARTED'),
                            ('SUCCESS', 'SUCCESS'),
                            ('FAILURE', 'FAILURE'),
                            ('RETRY', 'RETRY'),
                            ('REVOKED', 'REVOKED'),
                        ],
                        default='PENDING',
                        help_text='Status of upload task',
                        max_length=7,
                        null=True,
                    ),
                ),
                (
                    'computed_set',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.computedset',
                    ),
                ),
                (
                    'project',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.project',
                    ),
                ),
                (
                    'snapshot',
                    models.ForeignKey(
                        help_text='The snapshot the file transfer is part of',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.snapshot',
                    ),
                ),
                (
                    'target',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.target',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_jobrequest',
            },
        ),
        migrations.CreateModel(
            name='JobOverride',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'override',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                (
                    'author',
                    models.ForeignKey(
                        help_text='The user that uploaded the override',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_joboverride',
            },
        ),
        migrations.CreateModel(
            name='JobFileTransfer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('squonk_project', models.CharField(max_length=200, null=True)),
                (
                    'proteins',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    'compounds',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    'transfer_spec',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ('transfer_task_id', models.CharField(max_length=50, null=True)),
                (
                    'transfer_status',
                    models.CharField(
                        choices=[
                            ('PENDING', 'PENDING'),
                            ('STARTED', 'STARTED'),
                            ('SUCCESS', 'SUCCESS'),
                            ('FAILURE', 'FAILURE'),
                            ('RETRY', 'RETRY'),
                            ('REVOKED', 'REVOKED'),
                        ],
                        default='PENDING',
                        max_length=7,
                    ),
                ),
                (
                    'transfer_progress',
                    models.DecimalField(
                        decimal_places=2,
                        help_text='Intended to be used as an indication of progress (0 to 100%)',
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    'transfer_datetime',
                    models.DateTimeField(
                        help_text='The datetime the transfer was completed', null=True
                    ),
                ),
                (
                    'snapshot',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.snapshot',
                    ),
                ),
                (
                    'target',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.target',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_jobfiletransfer',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSiteObservation',
            fields=[
                (
                    'id',
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name='ID'
                    ),
                ),
                ('code', models.TextField()),
                ('bound_file', models.TextField(max_length=255, null=True)),
                ('apo_solv_file', models.TextField(max_length=255, null=True)),
                ('apo_desolv_file', models.TextField(max_length=255, null=True)),
                ('apo_file', models.TextField(max_length=255, null=True)),
                ('xmap_2fofc_file', models.TextField(max_length=255, null=True)),
                ('event_file', models.TextField(max_length=255, null=True)),
                ('artefacts_file', models.TextField(max_length=255, null=True)),
                ('pdb_header_file', models.TextField(max_length=255, null=True)),
                ('smiles', models.TextField()),
                ('seq_id', models.IntegerField()),
                ('chain_id', models.CharField(max_length=1)),
                ('ligand_mol_file', models.TextField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(
                        choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')],
                        max_length=1,
                    ),
                ),
                (
                    'canon_site_conf',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='viewer.canonsiteconf',
                    ),
                ),
                (
                    'cmpd',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='viewer.compound',
                    ),
                ),
                (
                    'experiment',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='viewer.experiment',
                    ),
                ),
                (
                    'history_user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'xtalform_site',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='viewer.xtalformsite',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical site observation',
                'verbose_name_plural': 'historical site observations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ExperimentUpload',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'file',
                    models.FileField(max_length=255, upload_to='experiment-upload/'),
                ),
                (
                    'commit_datetime',
                    models.DateTimeField(
                        help_text='The UTC datetime the upload was committed'
                    ),
                ),
                (
                    'complete_datetime',
                    models.DateTimeField(
                        help_text='The UTC datetime the upload finished. It can be considered a success if the status is LOADED',
                        null=True,
                    ),
                ),
                (
                    'task_id',
                    models.CharField(
                        help_text='Celery task ID responsible for the upload',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('LOADING', 'LOADING'),
                            ('LOADED', 'LOADED'),
                            ('FAILURE', 'FAILURE'),
                        ],
                        default='LOADING',
                        max_length=7,
                    ),
                ),
                (
                    'message',
                    models.TextField(
                        blank=True,
                        help_text='Any message associated with the upload. Typically set when status is FAILURE',
                        null=True,
                    ),
                ),
                (
                    'committer',
                    models.ForeignKey(
                        help_text='The user committing the original file. This user may not be the author of the file',
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'project',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='viewer.project'
                    ),
                ),
                (
                    'target',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='viewer.target'
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_upload',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='viewer.experimentupload',
            ),
        ),
        migrations.CreateModel(
            name='DownloadLinks',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'file_url',
                    models.CharField(
                        db_index=True,
                        help_text='Contains the complete link to the zip file including the uuid',
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    'proteins',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='Contains a sorted list of the protein codes in the search',
                        null=True,
                    ),
                ),
                (
                    'protein_params',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='Contains a sorted list of parameters used to create the zip file',
                        null=True,
                    ),
                ),
                (
                    'other_params',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='Contains a sorted list of parameters used to create the zip file',
                        null=True,
                    ),
                ),
                (
                    'static_link',
                    models.BooleanField(
                        default=False,
                        help_text='This preserves the proteins from the previous search',
                    ),
                ),
                (
                    'zip_contents',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='For static files, this field contains the contents of the zip so that it can be reconstructed with the same file-links that it had previously. For dynamic files, the zip is reconstructed from the search',
                        null=True,
                    ),
                ),
                ('create_date', models.DateTimeField()),
                (
                    'keep_zip_until',
                    models.DateTimeField(
                        db_index=True,
                        help_text='The datetime when the tag was created plus the retention time (1 hour at the time of writing)',
                    ),
                ),
                ('zip_file', models.BooleanField(default=False)),
                (
                    'original_search',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    'target',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.target',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_downloadlinks',
            },
        ),
        migrations.CreateModel(
            name='DiscourseTopic',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'topic_title',
                    models.CharField(
                        help_text='The title of the (sub)category within Discourse. It must be unique within Discourse',
                        max_length=200,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                15,
                                'Discourse Topic Title must be longer than 15 characters',
                            )
                        ],
                    ),
                ),
                ('discourse_topic_id', models.IntegerField()),
                (
                    'author',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_discoursetopic',
            },
        ),
        migrations.CreateModel(
            name='DiscourseCategory',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'category_name',
                    models.CharField(
                        help_text='The name of the (sub)category within Discourse. It must be unique',
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    'discourse_category_id',
                    models.IntegerField(
                        help_text='The Discourse categoryID. Returned when the category was created'
                    ),
                ),
                (
                    'author',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'db_table': 'viewer_discoursecategory',
            },
        ),
        migrations.CreateModel(
            name='DesignSet',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('set_name', models.CharField(max_length=50)),
                (
                    'set_type',
                    models.CharField(
                        choices=[
                            ('library', 'library'),
                            ('follow-up', 'follow-up'),
                            ('user-submitted', 'user-submitted'),
                            ('enumerated', 'enumerated'),
                        ],
                        default='user-submitted',
                        max_length=100,
                    ),
                ),
                (
                    'set_description',
                    models.TextField(blank=True, max_length=1000, null=True),
                ),
                (
                    'compounds',
                    models.ManyToManyField(
                        help_text='The compounds that are in the design set',
                        to='viewer.Compound',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='ComputedSetSubmitter',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=100)),
                (
                    'institution',
                    models.CharField(
                        help_text='The institution or organizational affiliation of the compound set submitter',
                        max_length=50,
                    ),
                ),
                ('generation_date', models.DateField()),
                (
                    'method',
                    models.CharField(
                        help_text='A name for the method that was used to produce the uploaded data',
                        max_length=50,
                    ),
                ),
            ],
            options={
                'unique_together': {('name', 'method')},
            },
        ),
        migrations.AddField(
            model_name='computedset',
            name='submitter',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='viewer.computedsetsubmitter',
            ),
        ),
        migrations.AddField(
            model_name='computedset',
            name='target',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='viewer.target',
            ),
        ),
        migrations.AddField(
            model_name='computedmolecule',
            name='computed_set',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='viewer.computedset'
            ),
        ),
        migrations.AddField(
            model_name='computedmolecule',
            name='site_observation',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to='viewer.siteobservation',
            ),
        ),
        migrations.CreateModel(
            name='CompoundIdentifier',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('url', models.URLField(null=True)),
                ('name', models.CharField(max_length=40)),
                (
                    'compound',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.compound',
                    ),
                ),
                (
                    'type',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.compoundidentifiertype',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='compound',
            name='inspirations',
            field=models.ManyToManyField(
                blank=True,
                help_text='Foreign key link to any number of 3D Molecules that inspired the design of this compound',
                to='viewer.SiteObservation',
            ),
        ),
        migrations.AddField(
            model_name='compound',
            name='project_id',
            field=models.ManyToManyField(to='viewer.Project'),
        ),
        migrations.AddField(
            model_name='canonsiteconf',
            name='ref_site_observation',
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='viewer.siteobservation',
            ),
        ),
        migrations.AddField(
            model_name='canonsite',
            name='quat_assembly',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='viewer.quatassembly',
            ),
        ),
        migrations.AddField(
            model_name='canonsite',
            name='ref_conf_site',
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='viewer.canonsiteconf',
            ),
        ),
        migrations.CreateModel(
            name='SiteObservationTag',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'tag',
                    models.CharField(
                        help_text='The (unique) name of the tag', max_length=200
                    ),
                ),
                (
                    'create_date',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    'colour',
                    models.CharField(
                        help_text='Expected to be an RGB string',
                        max_length=20,
                        null=True,
                    ),
                ),
                ('discourse_url', models.TextField(max_length=1000, null=True)),
                ('help_text', models.TextField(null=True)),
                (
                    'additional_info',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='Optional JSON field containing name/value pairs for future use',
                        null=True,
                    ),
                ),
                (
                    'category',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.tagcategory',
                    ),
                ),
                (
                    'site_observations',
                    models.ManyToManyField(blank=True, to='viewer.SiteObservation'),
                ),
                (
                    'target',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='viewer.target'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
                'unique_together': {('tag', 'target')},
            },
        ),
        migrations.CreateModel(
            name='SessionProjectTag',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'tag',
                    models.CharField(
                        help_text='The (unique) name of the tag', max_length=200
                    ),
                ),
                (
                    'create_date',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    'colour',
                    models.CharField(
                        help_text='Expected to be an RGB string',
                        max_length=20,
                        null=True,
                    ),
                ),
                ('discourse_url', models.TextField(max_length=1000, null=True)),
                ('help_text', models.TextField(null=True)),
                (
                    'additional_info',
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        help_text='Optional JSON field containing name/value pairs for future use',
                        null=True,
                    ),
                ),
                (
                    'category',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.tagcategory',
                    ),
                ),
                (
                    'session_projects',
                    models.ManyToManyField(to='viewer.SessionProject'),
                ),
                (
                    'target',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='viewer.target'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
                'unique_together': {('tag', 'target')},
            },
        ),
        migrations.CreateModel(
            name='ActivityPoint',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('source', models.CharField(db_index=True, max_length=50, null=True)),
                (
                    'activity',
                    models.FloatField(
                        db_index=True, help_text='Measured log(10) activity'
                    ),
                ),
                (
                    'units',
                    models.CharField(
                        help_text='Units (e.g. uM or whatever)', max_length=50
                    ),
                ),
                ('confidence', models.IntegerField(db_index=True, null=True)),
                (
                    'internal_id',
                    models.CharField(
                        help_text='The ID of the compound for internal use',
                        max_length=150,
                        null=True,
                    ),
                ),
                (
                    'operator',
                    models.CharField(
                        default='NA',
                        help_text='An operator, like > < or =',
                        max_length=5,
                    ),
                ),
                (
                    'cmpd_id',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='viewer.compound',
                    ),
                ),
                (
                    'target_id',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='viewer.target'
                    ),
                ),
            ],
            options={
                'unique_together': {('target_id', 'activity', 'cmpd_id', 'units')},
            },
        ),
    ]
